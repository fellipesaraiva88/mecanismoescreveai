/**
 * Comandos admin para gerenciar whitelist
 */

import type { Command } from '../commands/types.js';
import { WhitelistManager } from './manager.js';
import { CommandParser } from '../commands/parser.js';

/**
 * Comando: /grupos
 * Lista grupos autorizados (admin only)
 */
export const gruposCommand: Command = {
  name: 'grupos',
  aliases: ['groups', 'whitelist'],
  description: 'Lista grupos autorizados (admin only)',
  usage: '/grupos [add|remove|list]',
  category: 'admin',
  adminOnly: true,
  execute: async (context) => {
    // Verifica se √© admin
    if (!WhitelistManager.isAdmin(context.sender)) {
      return {
        text: '‚ùå Apenas administradores podem usar este comando.',
        reply: true,
      };
    }

    const subcommand = context.args[0]?.toLowerCase();

    // /grupos list (ou sem argumentos)
    if (!subcommand || subcommand === 'list') {
      const status = WhitelistManager.generateStatus();
      return {
        text: status,
        reply: false,
      };
    }

    // /grupos add <jid> <nome>
    if (subcommand === 'add') {
      if (context.args.length < 3) {
        return {
          text: '‚ùå Uso: /grupos add <jid> <nome do grupo>',
          reply: true,
        };
      }

      const jid = context.args[1];
      const name = context.args.slice(2).join(' ');

      WhitelistManager.addGroup(jid, name);

      return {
        text: `‚úÖ Grupo "${name}" adicionado √† whitelist!\n\nJID: \`${jid}\``,
        reply: true,
      };
    }

    // /grupos remove <jid>
    if (subcommand === 'remove' || subcommand === 'rm') {
      if (context.args.length < 2) {
        return {
          text: '‚ùå Uso: /grupos remove <jid>',
          reply: true,
        };
      }

      const jid = context.args[1];
      const removed = WhitelistManager.removeGroup(jid);

      if (removed) {
        return {
          text: `‚úÖ Grupo removido da whitelist!\n\nJID: \`${jid}\``,
          reply: true,
        };
      } else {
        return {
          text: `‚ùå Grupo n√£o encontrado na whitelist.\n\nJID: \`${jid}\``,
          reply: true,
        };
      }
    }

    // /grupos current (mostra JID do grupo atual)
    if (subcommand === 'current' || subcommand === 'este') {
      if (!context.isGroup) {
        return {
          text: '‚ùå Este comando s√≥ funciona em grupos.',
          reply: true,
        };
      }

      const isAllowed = WhitelistManager.isAllowed(context.jid);

      return {
        text: `üìç *Grupo Atual*\n\nJID: \`${context.jid}\`\n\nStatus: ${isAllowed ? '‚úÖ Autorizado' : '‚ùå N√£o autorizado'}\n\nüí° *Dica:* Copie o JID acima para adicionar √† whitelist.`,
        reply: false,
      };
    }

    return {
      text: `‚ùå Subcomando desconhecido: ${subcommand}\n\nUso:\n‚Ä¢ /grupos list - Lista grupos\n‚Ä¢ /grupos add <jid> <nome> - Adiciona grupo\n‚Ä¢ /grupos remove <jid> - Remove grupo\n‚Ä¢ /grupos current - Mostra JID do grupo atual`,
      reply: true,
    };
  },
};
